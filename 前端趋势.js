
旧浏览器逐渐被淘汰
移动端的需求增加
前端交互越来越多，功能越来越复杂


架构
后端MVC 向 REST API + 前端 MV* 迁移


// 后端MVC
用户交互刷新整个页面


// REST API + 前端 MV* 迁移
交互时，异步请求，局部刷新页面


MVVM   
model  // js对象
view   // dom     数据驱动DOM变化。dom是数据的自然映射。
viewModel   // 连接view 和 model 的中间件。当数据发生变化，自动渲染view。
// 当用户与view发生交互，通知model进行更改。实现数据的双向绑定



// 优点
通过异步请求，对获取的数据做持久化。不需要每次请求整个页面，只需要修改必须要的内容。
特别是移动端，虽然可以对页面做一些缓存。但页面的DOM,JS,CSS都会被页面重新解析一遍。代价非常昂贵。
// 不使用MVVM框架。数据和视图如何交互
从后台获取数据，手动操作DOM，修改view。非常繁琐
// MVVM
只需要改变数据，当数据发生变化，view自动修改。对操作进行监听，发生操作时，改变数据。形成双向绑定
// 组件化
代码重用。生命周期。数据流动


// 前端技术的选型
开源技术的社区如何
上手难度，学习曲线
团队整体水平


// vue
数据驱动 + 组件化 的框架

