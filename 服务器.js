url slug

// 不合理的url结构
http://taobo.com/products/65cd4fa5f41a2f6

// 有意义的url结构
http://taobo.com/products/skirt-6202

// 这种用户友好的永远链接通常叫做slug,我们通常推荐为文档做一个slug字段来构建有意义的url
// 这种字段通常唯一索引，以加速查询和确保唯一


url 中的域名不区分大小写，但是路径和文件名可能会区分大小写




// session 和 cookie
设置httponly 以后 ，客户端JS无法读取到，也无法看到cookie

服务端session丢失以后，客户端将退出登录
同一用户的每次登录都会生成一个不一样的session

session 中间件会在 req 上添加 session 对象，即 req.session 初始值为 {}。
当我们登录后设置 req.session.user = 用户信息，返回浏览器的头信息中会带上 
set-cookie 将 session id 写到浏览器 cookie 中，那么该用户下次请求时，通过
带上来的 cookie 中的 session id 我们就可以查找到该用户，并将用户信息保存到 req.session.user。



// 反向代理 负载均衡
痛定思痛，老总又成立了几个连锁饭店，形成一个集群，对外提供统一标准的菜品服务，
电话订餐电话400-xxx-7777，当食客涌入饭店总台，总台将食客用大巴运到各个连锁店，
这样食客既不需要排队，各连锁店都能高速运转起来，一举两得，老总乐开了花，并为
此种运作模式起名为“反向代理”（Reverse Proxy)。反向代理在计算机世界里，由于单
个服务器的处理客户端（用户）请求能力有一个极限，当用户的接入请求蜂拥而入时，
会造成服务器忙不过来的局面，可以使用多个服务器来共同分担成千上万的用户请求，
这些服务器提供相同的服务，对于用户来说，根本感觉不到任何差别。

// 反向代理的实现
1）需要有一个负载均衡设备来分发用户请求，将用户请求分发到空闲的服务器上
2）服务器返回自己的服务到负载均衡设备
3）负载均衡将服务器的服务返回用户
以上的潜台词是：用户和负载均衡设备直接通信，也意味着用户做服务器域名解析时，
解析得到的IP其实是负载均衡的IP，而不是服务器的IP。
这样有一个好处，当新加入/移走服务器时，仅需要修改负载均衡的服务器列表，而不会影响现有服务。

// 负载均衡
负载均衡(Load Balance)是分布式系统架构设计中必须考虑的因素之一，
它通常是指，将请求/数据【均匀】分摊到多个操作单元上执行，负载均衡的关键在于【均匀】。

(1)【客户端层】到【反向代理层】的负载均衡，是通过“DNS轮询”实现的

(2)【反向代理层】到【站点层】的负载均衡，是通过“nginx”实现的

(3)【站点层】到【服务层】的负载均衡，是通过“服务连接池”实现的



// 虚拟主机  VPS  ESC
虚拟主机：预装网站运行环境，赠送正版数据库，可通过图形化控制面板管理，主要用于搭建网站。
独享系列虚机：客户独享整台服务器资源，无资源争抢更稳定，不限流量更快速、独立IP更易推广，
适合企业建站客户；
共享系列虚机：多客户共享服务器硬件资源，价格优惠，简单易用，适合于开发者、个人站长建站；


// 虚拟主机
通常是只有 Apache / PHP / MySQL 的网站部署环境，没有完整的系统管理和 shell 访问权限，
通常一个系统中由许多用户共享。

// VPS
Virtual Private Server 虚拟专用服务器,一般是将一个独立服务器通过虚拟化技术虚拟成
多个虚拟专用服务器。

// tips
一般建网站就用虚拟主机。虚拟主机 固定配置
ESC 自由配置CPU,内存，带宽，可随时升级。ESC还是很合算的，有40G的硬盘
好一点的虚拟主机  价格 和 ESC差不多


// PV(访问量)：UV(独立访客)：IP(独立IP）
PV（page view）即页面浏览量
IP表示访问你的网站的用户数，因为每个用户对应着一个IP地址，
但是每个用户可能会查看网站上的多个页面，所以PV总会比IP值高。


// CGI
CGI全称是“通用网关接口”(Common Gateway Interface)，
HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具，
其程序一般运行在网络服务器上。

web server（比如说nginx）只是内容的分发者。
比如，如果请求/index.html，那么web server会去文件系统中找到这个文件，发送给浏览器，
这里分发的是静态数据。

好了，如果现在请求的是/index.php，根据配置文件，nginx知道这个不是静态文件，
需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。
Nginx会传哪些数据给PHP解析器呢？url要有吧，查询字符串也得有吧，
POST数据也要有，HTTP header不能少吧，

好的，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。
仔细想想，你在PHP代码中使用的用户从哪里来的。

当web server收到/index.php这个请求后，会启动对应的CGI程序，这里就是PHP的解析器。
接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，
再以规定CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。
